# working on hard default config
# currently based on ppp_example.yaml
# what fields are missing for proper operation in yaml
# what fields that are not user input defaults could be

inputs:
    inputs_root: ./products/ #


    atx_files: [igs20.atx] # required
    igrf_files: [tables/igrf13coeffs.txt]
    #ask about other inputs like this
    #egm_files: [tables/EGM2008.gfc] # Earth gravity model coefficients file
    erp_files: [finals.data.iau2000.txt]
    planetary_ephemeris_files: [tables/DE436.1950.2050]

    # Ask about  troposphere data
    # probably needed as part of error correction
    troposphere:
        gpt2grid_files: [tables/gpt_25.grd]

    tides:
        ocean_tide_loading_blq_files: [tables/OLOAD_GO.BLQ] # required if ocean loading is applied
        atmos_tide_loading_blq_files: [tables/ALOAD_GO.BLQ] # required if atmospheric tide loading is applied
        ocean_pole_tide_loading_files: [tables/opoleloadcoefcmcor.txt] # required if ocean pole tide loading is applied

    snx_files:
        # - "*.SNX" # use a wild card to include all files matching the description in the directory
        -  #USERSET

    satellite_data:
        # ASK are the nav files needed for MVP
        # nav_files:
        # - "*.rnx"

        # product provided
        clk_files:
            # - "*.CLK"
            -
        bsx_files:
            # - "*.BIA"
            -
        sp3_files:
            # - "*.SP3"
            -

    gnss_observations:
        gnss_observations_root: ../data/ #
        rnx_inputs:
            # - "*.rnx"
            -  #USER_INPUT_RNX
        # - DARW00AUS_R_20191990000_01D_30S_MO.rnx
        # - HOB200AUS_R_20191990000_01D_30S_MO.rnx
        # - "M*.rnx"

outputs:
    metadata:
        config_description: default_config_<BRANCH> #USER_INPUT [default_config]_<BRANCH>
    outputs_root: ./outputs/<CONFIG>

    gpx:
        output: true
        filename: <RECEIVER>_<CONFIG>_<YYYY><DDD><HH>.GPX
    pos:
        output: true
        filename: <RECEIVER>_<CONFIG>_<YYYY><DDD><HH>.POS





satellite_options:
    # ask about this for mvp
    # leave in the error handling?
    global:
        error_model: ELEVATION_DEPENDENT #  {uniform,elevation_dependent}
        code_sigma: 0 # Standard deviation of code measurements
        phase_sigma: 0 # Standard deviation of phase measurmeents
        models:
            phase_bias:
                enable: false


    # ask about the satellite excludes in the yaml config
    #probably not as it's mvp
    # E05:
    #     exclude: true # Exclude satellites
    # E06:
    #     exclude: true

receiver_options:
    # Will override TEST values
    global:
        elevation_mask: 15 # degrees
        error_model: ELEVATION_DEPENDENT # {uniform,elevation_dependent}
        #leave
        code_sigma: 0.3 # Standard deviation of code measurements, m
        phase_sigma: 0.003 # Standard deviation of phase measurmeents, m
        clock_codes: [AUTO, AUTO]
        zero_dcb_codes: [AUTO, AUTO]
        # would i need to add in stuff for other satellite constellations
        rec_reference_system: GPS
        models:
            phase_bias:
                enable: false
            troposphere: # Tropospheric modelling accounts for delays due to refraction of light in water vapour
                enable: true
                models: [gpt2] # List of models to use for troposphere [standard,sbas,vmf3,gpt2,cssr]
            tides:
                atl: true # Enable atmospheric tide loading
                enable: true # Enable modelling of tidal disaplacements
                opole: true # Enable ocean pole tides
                otl: true # Enable ocean tide loading
                solid: true # Enable solid Earth tides
                spole: true # Enable solid Earth pole tides
    TEST: #change to header name of RNX
        receiver_type:       # USER_INPUT (string)
        antenna_type:        # USER_INPUT (string)

        #don't worry about these
        #apriori_position: # [floats] #Don
        #aliases: [ PIVOT ] # set as pivot station

        models:
            eccentricity:
                enable: true # [ 0.0000,   0.0000,   0.0000 ] is equivalent to no eccentricity
                offset: [ 0.0000,   0.0000,   0.0000 ] # [floats] USER_SET

processing_options:
    process_modes:
        preprocessor: true # Preprocessing and quality checks
        spp: true # Perform SPP on receiver data
        ppp: true # Perform PPP network or end user mode
        ionosphere: false # Compute Ionosphere models based on GNSS measurements
        slr: false # Process SLR observations

    epoch_control:
        start_epoch:         #RNX
        end_epoch:           #RNX
        #max_epochs:         2880 # Future user set.
        epoch_interval:      #RNX # seconds
        #ASK CLIENT what this should be set to for MVP
        wait_next_epoch: 3600 # User set seconds (make large for post-processing)

    gnss_general:
        #eop_comp
        add_eop_component: true
        sys_options:
            # Currently: gps, gal, bds, glo, qzs
            # Ask about the other satellite constellation codes
            # should it include sanpan(australian) and the IRNSS(indian)
            # constellations
            # Ask about clock_codes
                #
            # Ask about reject_eclipse currently being set to false.
                # should it be set to true for mvp as that way it would
                #keep as false as client wants to keep eclipse data.
            gps:
                process: false

                reject_eclipse: false

                # For the current iteration
                # Don't worry about clock_codes
                # is it L5 or L5W
                # clock_codes: [ L1W, L2W, L5 ] #L6
                #code pritised list

                # Check the satellite code priorities from client
                # then select the best two that appear in the rnx file.
                # for the chosen code priorites
                code_priorities: [] # RNX

            gal:
                process: false
                reject_eclipse: false
                # E1, E6, E5b E5a
                # clock_codes: []
                code_priorities: [] # RNX

            bds:
                process: false
                reject_eclipse: false
                # B1, B3, B2b, B2a
                # clock_codes: []
                code_priorities: [] # RNX


            glo:
                process: false
                reject_eclipse: false
                #G1,G2,G3/L5
                # clock_codes: []
                code_priorities: [] # RNX

            qzs:
                process: false
                reject_eclipse: false
                # L1,L2,L5,L6
                # clock_codes: []
                code_priorities: [] # RNX


    # Ask client
    # Would I keep the current error handling configurations for the MVP
    # Based on the ppp_example.yaml
    # assuming that there is some sort of problem with measurements from Melbourne-Wubenna

    preprocessor: # Configurations for the kalman filter and its sub processes
        cycle_slips: # Cycle slips may be detected by the preprocessor and measurements rejected or ambiguities reinitialised
            mw_process_noise: 0 # Process noise applied to filtered Melbourne-Wubenna measurements to detect cycle slips
            slip_threshold: 0.05 # Value used to determine when a slip has occurred
        preprocess_all_data: true

    spp:
        # always_reinitialise: false # Reset SPP state to zero to avoid potential for lock-in of bad states
        max_lsq_iterations: 12 # Maximum number of iterations of least squares allowed for convergence
        outlier_screening:
            raim: true # Enable Receiver Autonomous Integrity Monitoring
            max_gdop: 30 # Maximum dilution of precision before error is flagged

    ppp_filter:
        outlier_screening:
            chi_square:
                enable: false # Enable Chi-square test
                mode: innovation # Chi-square test mode {none,innovation,measurement,state}
            prefit:
                max_iterations: 3 # Maximum number of measurements to exclude using prefit checks before attempting to filter
                omega_test: false # Enable omega-test
                sigma_check: true # Enable sigma check
                state_sigma_threshold: 4 # Sigma threshold for states
                meas_sigma_threshold: 4 # Sigma threshold for measurements
            postfit:
                max_iterations: 10 # Maximum number of measurements to exclude using postfit checks while iterating filter
                sigma_check: true # Enable sigma check
                state_sigma_threshold: 4 # Sigma threshold for states
                meas_sigma_threshold: 4 # Sigma threshold for measurements

        ionospheric_components: # Slant ionospheric components
            common_ionosphere: true # Use the same ionosphere state for code and phase observations
            use_gf_combo: false # Combine 'uncombined' measurements to simulate a geometry-free solution
            use_if_combo: false # Combine 'uncombined' measurements to simulate an ionosphere-free solution

        chunking:
            by_receiver: true # Split large filter and measurement matrices blockwise by receiver ID to improve processing speed
            by_satellite: false # Split large filter and measurement matrices blockwise by satellite ID to improve processing speed
            size: 0

        rts: # Rauch-Tung-Striebel (RTS) backwards smoothing
            enable: true
            lag: -1
            # interval:               86400
            inverter: LDLT # Inverter to be used within the rts processor, which may provide different performance outcomes in terms of processing time and accuracy and stability
            filename: <CONFIG>_<RECEIVER>.rts
        #moving filter of some sort?
        periodic_reset:
            # enable:                 true
            # interval:              86400
            # states:                [REC_POS]

    model_error_handling:
        meas_deweighting: # Measurements that are outside the expected confidence bounds may be deweighted so that outliers do not contaminate the filtered solution
            deweight_factor: 1000 # Factor to downweight the variance of measurements with statistically detected errors
            enable: true # Enable deweighting of all rejected measurement
        state_deweighting: # Any "state" errors cause deweighting of all measurements that reference the state
            deweight_factor: 1000 # Factor to downweight the variance of measurements with statistically detected errors
            enable: true # Enable deweighting of all referencing measurements
        error_accumulation:
            enable: true
            receiver_error_count_threshold: 4
            receiver_error_epochs_threshold: 4
        ambiguities:
            outage_reset_limit: 300
            phase_reject_limit: 2 # Reset ambiguity after 2 large fractional residuals are found (replaces phase_reject_count:)
            reset_on: # Reset ambiguities when slip is detected by the following
                gf: true # GF test
                lli: true # LLI test
                mw: true # MW test
                scdia: true # SCDIA test

# ask about the error handling here
# if it should be kept for the mvp
# if it is what should I change
estimation_parameters:
    global_models:
        eop:
            # estimated:        [true] # Estimate state in kalman filter
            sigma: [1000] # Apriori sigma values
            process_noise: [0] # Process noise sigmas
        eop_rates:
            # estimated:        [true] # Estimate state in kalman filter
            sigma: [1000] # Apriori sigma values
            process_noise: [0] # Process noise sigmas
        ion:
            estimated: [false] # Estimate state in kalman filter
            sigma: [-1] # Apriori sigma values
            process_noise: [0] # Process noise sigmas

    receivers:
        global:
            pos:
                estimated: [true]
                sigma: [0]             #USER_SET Defaulting to static
                                       #saw some bounding (100-10)
                                       #how would this be done
                                       # i.e through process_noise
                # process_noise:      [30]
            pos_rate: # Velocity
                estimated: [false] # [bools] Estimate state in kalman filter
                sigma: [0] # [floats] Apriori sigma values
                process_noise: [0] # [floats] Process noise sigmas
                # process_noise_dt:   SECOND  # (enum) Time unit for process noise - sqrt_sec, sqrt_day etc
                # apriori_val:        [0]     # [floats] Apriori state values
                # mu:                 [0]     # [floats] Desired mean value for gauss markov states
                # tau:                [-1]    # [floats] Correlation times for gauss markov noise, defaults to -1 -> inf (Random Walk)
            # will these be user set values or values derived from something like the troposphere file that is pulled in

            clock:
                estimated: [true]
                sigma: [1000]
                process_noise: [100]
            ant_delta:
                estimated: [true]
                sigma: [10]
                process_noise: [1]
                tau: [100]
            clock_rate:
                # does this mean that the calculation will not take into account cpu clock rate?
                estimated: [false]
                sigma: [0.005]
                process_noise: [1e-4]
            ambiguities:
                estimated: [true]
                sigma: [1000]
                process_noise: [0]
            ion_stec: # Ionospheric slant delay
                estimated: [true] # Estimate state in kalman filter
                sigma: [200] # Apriori sigma values
                process_noise: [10] # Process noise sigmas
            trop:
                estimated: [true]
                sigma: [0.3]
                process_noise: [0.0001]
            trop_grads:
                estimated: [true]
                sigma: [0.03]
                process_noise: [1.0E-6]
            code_bias:
                estimated: [true] # false
                sigma: [20]
                process_noise: [0]
            phase_bias:
                estimated: [false]
                sigma: [10]
                process_noise: [0]

